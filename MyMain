#include "pirates24b1.h"
#include <string>
#include <iostream>

using namespace std;

void print(string cmd, StatusType res);
void print(string cmd, output_t<int> res);
void print(Ocean *obj, int index);
void print(Ocean *obj, int index, int ship);
void lineBreak();

int main()
{

    // Init
    Ocean *obj = new Ocean();
    print("Ocean()", StatusType::SUCCESS);
    print("add ship", obj->add_ship(1, 10));
    print("add pirate", obj->add_pirate(1, 1, 50));
    print("add pirate", obj->add_pirate(2, 1, 20));
    print("add pirate", obj->add_pirate(4, 1, 30));
    print("add pirate", obj->add_pirate(4, 1, 30));
    print("add pirate", obj->add_pirate(5, 1, 10));

    lineBreak();

    print("add ship", obj->add_ship(2, 30));
    print("add pirate", obj->add_pirate(31, 12, 20));
    print("add pirate", obj->add_pirate(42, 2, 30));
    print("add pirate", obj->add_pirate(54, 2, 30));
    print("add pirate", obj->add_pirate(59, 2, 10));

    delete obj;
    return 0;
}

// Helpers
static const char *StatusTypeStr[] =
    {
        "SUCCESS",
        "ALLOCATION_ERROR",
        "INVALID_INPUT",
        "FAILURE"};

void print(string cmd, StatusType res)
{
    cout << cmd << ": " << StatusTypeStr[(int)res] << endl;
}

void print(string cmd, output_t<int> res)
{
    if (res.status() == StatusType::SUCCESS)
    {
        cout << cmd << ": " << StatusTypeStr[(int)res.status()] << ", " << res.ans() << endl;
    }
    else
    {
        cout << cmd << ": " << StatusTypeStr[(int)res.status()] << endl;
    }
}

void print(Ocean *obj, int index)
{
    obj->ships_tree.generateDotFile("ships" + to_string(index) + ".dot");
    obj->pirates_tree.generateDotFile("pirates" + to_string(index) + ".dot");
}

void print(Ocean *obj, int index, int ship)
{
    obj->ships_tree.root->inner_node->getMoneyPirates().generateDotFile("ship_" + to_string(ship) + "_pirates" + to_string(index) + ".dot");
}

void lineBreak()
{
    cout << "_____________________________" << endl;
}